// Initially Generated by Claude
// Fine tuned by hand
import fs from 'fs'
import ts from 'typescript';
import path from 'path';

function getPaths() {
    let paths = process.argv.slice(2)
    paths = paths.filter(p => fs.existsSync(p))

    if (paths.length === 0) {
        paths.push('.');
    }

    return paths
}

const paths = getPaths();

let cwd = process.cwd()

function watchProgram(rootFiles) {
    const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, "tsconfig.json");
    if (!configPath) throw new Error("tsconfig.json not found");

    const host = ts.createWatchCompilerHost(
        configPath,
        { noEmit: true },
        ts.sys,
        ts.createSemanticDiagnosticsBuilderProgram,
        reportDiagnostic,
        reportWatchStatus,
    );

    ts.createWatchProgram(host);
}

function categoryLabel(category) {
    switch (category) {
        case 0: return "warning"
        case 1: return "error"
        case 2: return "suggestion"
        case 3: return "message"
    }
}

function reportDiagnostic(diagnostic) {
    if (!diagnostic.file) return;

    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n");

    let category = categoryLabel(diagnostic.category)
    let filename = path.relative(cwd, diagnostic.file.fileName)
    if (diagnostic.category === 1) { // error
        console.log(JSON.stringify({
            Type: "diagnostic",
            Category: category,
            Filename: filename,
            Line: line+1,
            Character: character+1,
            Length: diagnostic.length,
            Code: diagnostic.code,
            Message: message,
        }))
    }
}

function reportWatchStatus(diagnostic, newLine, options, errors) {
    let begin = errors === undefined
    let stage = begin ? "begin" : "end"
    console.log(JSON.stringify({type: "report", begin, errors}))
}

watchProgram(paths);
